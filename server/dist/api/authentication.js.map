{"version":3,"sources":["../../src/api/authentication.js"],"names":["signup","req","res","next","body","email","password","firstName","lastName","status","send","error","UserModel","findOne","err","existingUser","user","name","first","last","save","savedUser","json","success","token","generateToken","signin","comparedPassword","good"],"mappings":"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","sourcesContent":["import token from '../util/token';\nimport UserModel from '../user/model';\n\nexport default {\n    signup : (req, res, next) => {\n        const { email, password, firstName, lastName } = req.body;\n    \n        if (!email || !password) {\n            return res\n                .status(422)\n                .send({error: 'You must provide email and password.'});\n        }\n        UserModel\n            .findOne({\n                email: email\n            }, function (err, existingUser) {\n                if (err) return res.status(422).send(err);\n                if (existingUser) {\n                    return res\n                        .status(422)\n                        .send({error: 'Email is in use'});\n                }\n                const user = new UserModel({\n                    name: {\n                        first: firstName, \n                        last: lastName\n                    },\n                    email: email,\n                    password: password\n                })\n    \n                user.save(function (err, savedUser) {\n                    if (err) {\n                        return next(err)\n                    }\n    \n                    res.json({\n                        success: true,\n                        token: token.generateToken(savedUser)\n                    })\n                })\n            })\n    },\n    \n    signin: (req, res, next) => {\n        const email = req.body.email;\n        const password = req.body.password;\n        if (!email || !password) {\n            return res\n                .status(422)\n                .send({error: 'You must provide email and password.'});\n        }\n        UserModel\n            .findOne({\n                email: email\n            }, function (err, existingUser) {\n                if (err || !existingUser) {\n                    return res.status(401).send(err || {error: \"User Not Found\"})\n                }\n                if (existingUser) {\n                    existingUser.comparedPassword(password, function(err, good) {\n                        if (err || !good) {\n                                return res.status(401).send(err || 'User not found')\n                            }\n    \n                            res.send({\n                                token: token.generateToken(existingUser)\n                            })\n                    })\n                }\n            })\n    }\n}\n"],"file":"authentication.js"}