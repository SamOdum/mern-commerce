{"version":3,"sources":["../../src/user/model.js"],"names":["Schema","mongoose","name","first","String","last","email","type","unique","lowercase","emailVerified","Boolean","password","phone","number","verified","pre","next","user","bcrypt","genSalt","err","salt","hash","methods","comparedPassword","candidatePassword","cb","compare","good","model"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA,IAAMA,MAAM,GAAG,IAAIC,qBAASD,MAAb,CAAoB;AAC/BE,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAEC,MADL;AAEFC,IAAAA,IAAI,EAAED;AAFJ,GADyB;AAK/BE,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEH,MADH;AAEHI,IAAAA,MAAM,EAAE,IAFL;AAGHC,IAAAA,SAAS,EAAE;AAHR,GALwB;AAU/BC,EAAAA,aAAa,EAAE;AACXH,IAAAA,IAAI,EAAEI,OADK;AAEX,eAAS;AAFE,GAVgB;AAc/BC,EAAAA,QAAQ,EAAER,MAdqB;AAe/BS,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE;AACJP,MAAAA,IAAI,EAAEH;AADF,KADL;AAIHW,IAAAA,QAAQ,EAAE;AACNR,MAAAA,IAAI,EAAEI,OADA;AAEN,iBAAS;AAFH;AAJP;AAfwB,CAApB,CAAf;AA0BAX,MAAM,CAACgB,GAAP,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAc;AAC7B;AACA,MAAMC,IAAI,GAAG,IAAb;;AAEAC,uBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAmB;AAClC,QAAID,GAAJ,EAAS;AAAE,aAAOJ,IAAI,CAACI,GAAD,CAAX;AAAkB;;AAE7BF,yBAAOI,IAAP,CAAYL,IAAI,CAACN,QAAjB,EAA2BU,IAA3B,EAAiC,IAAjC,EAAuC,UAASD,GAAT,EAAcE,IAAd,EAAmB;AACtD,UAAIF,GAAJ,EAAS;AAAE,eAAOJ,IAAI,CAACI,GAAD,CAAX;AAAmB;;AAE9BH,MAAAA,IAAI,CAACN,QAAL,GAAgBW,IAAhB;AACAN,MAAAA,IAAI;AACP,KALD;AAMH,GATD;AAUH,CAdD,E,CAgBA;;AACAjB,MAAM,CAACwB,OAAP,CAAeC,gBAAf,GAAkC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AAC9DR,uBAAOS,OAAP,CAAeF,iBAAf,EAAkC,KAAKd,QAAvC,EAAiD,UAASS,GAAT,EAAcQ,IAAd,EAAmB;AAChE,QAAIR,GAAJ,EAAU;AAAE,aAAOM,EAAE,CAACN,GAAD,CAAT;AAAe;;AAC3BM,IAAAA,EAAE,CAAC,IAAD,EAAOE,IAAP,CAAF;AACH,GAHD;AAIH,CALD,C,CAOA;;;eACe5B,qBAAS6B,KAAT,CAAe,MAAf,EAAuB9B,MAAvB,C","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\n// Define the model\nconst Schema = new mongoose.Schema({\n    name: {\n        first: String,\n        last: String,\n    },\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true\n    },\n    emailVerified: {\n        type: Boolean,\n        default: false\n    },\n    password: String,\n    phone: {\n        number: {\n            type: String\n        },\n        verified: {\n            type: Boolean,\n            default: false\n        }\n    }\n})\n\nSchema.pre('save', function(next){\n    // get access to user model, then we can use user.email, user.password\n    const user = this;\n\n    bcrypt.genSalt(10, function(err, salt){\n        if (err) { return next(err) }\n\n        bcrypt.hash(user.password, salt, null, function(err, hash){\n            if (err) { return next(err); }\n\n            user.password = hash;\n            next()\n        })\n    })\n})\n\n// Make use of methods for comparedPassword\nSchema.methods.comparedPassword = function(candidatePassword, cb) {\n    bcrypt.compare(candidatePassword, this.password, function(err, good){\n        if (err ) { return cb(err)}\n        cb(null, good);\n    })\n}\n\n// Export the model\nexport default mongoose.model('User', Schema);"],"file":"model.js"}