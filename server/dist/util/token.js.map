{"version":3,"sources":["../../src/util/token.js"],"names":["generateToken","user","timeStamp","Date","getTime","payload","sub","id","iat","jwt","encode","config","jwt_secret","verifyToken","token","cb","decode","Error"],"mappings":";;;;;;;AAAA;;AACA;;;;eAEe;AACXA,EAAAA,aAAa,EAAE,uBAAUC,IAAV,EAAgB;AAC3B,QAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,QAAMC,OAAO,GAAG;AACZC,MAAAA,GAAG,EAAEL,IAAI,CAACM,EADE;AAEZC,MAAAA,GAAG,EAAEN;AAFO,KAAhB;AAIA,WAAOO,yBAAIC,MAAJ,CAAWL,OAAX,EAAoBM,mBAAOC,UAA3B,CAAP;AACH,GARU;AASXC,EAAAA,WAAW,EAAE,qBAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AAC9B,QAAMC,MAAM,GAAGP,yBAAIO,MAAJ,CAAWF,KAAX,EAAkBH,mBAAOC,UAAzB,CAAf;;AACA,QAAI,CAACI,MAAL,EAAa,OAAOD,EAAE,CAAC,IAAIE,KAAJ,CAAU,wBAAV,CAAD,CAAT;AACbF,IAAAA,EAAE,CAAC,IAAD,EAAOC,MAAP,CAAF;AACH;AAbU,C","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../config';\n\nexport default {\n    generateToken: function (user) {\n        const timeStamp = new Date().getTime();\n        const payload = {\n            sub: user.id,\n            iat: timeStamp\n        }\n        return jwt.encode(payload, config.jwt_secret);\n    },\n    verifyToken: function (token, cb) {\n        const decode = jwt.decode(token, config.jwt_secret)\n        if (!decode) return cb(new Error('Token is not verified.'));\n        cb(null, decode);\n    }\n}"],"file":"token.js"}