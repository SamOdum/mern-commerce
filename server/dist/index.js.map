{"version":3,"sources":["../src/index.js"],"names":["process","env","JWT_SECRET","err","Error","console","error","app","mongoose","connect","config","uri","useMongoClient","catch","Promise","global","use","origin","bodyParser","json","urlencoded","extended","get","req","res","send","post","Authentication","signup","signin","Middlewares","loginRequired","UserRouter","next","log","message","status","port","PORT","http","createServer","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAG,CAACA,QAAQC,GAAR,CAAYC,UAAhB,EAA4B;AACxB,QAAMC,MAAM,IAAIC,KAAJ,CAAU,6GAAV,CAAZ;AACAC,YAAQC,KAAR,CAAcH,GAAd;AACH;;AAED,IAAMI,MAAM,wBAAZ;;AAEAC,mBAASC,OAAT,CAAiBC,iBAAOF,QAAP,CAAgBG,GAAjC,EAAsC,EAAEC,gBAAgB,IAAlB,EAAtC,EACCC,KADD,CACO;AAAA,WAAKR,QAAQC,KAAR,CAAcH,GAAd,CAAL;AAAA,CADP;;AAGAK,mBAASM,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAP,IAAIS,GAAJ,CAAQ,oBAAK;AACTC,YAAQ,CAAC,+BAAD,EAAkC,uBAAlC;AADC,CAAL,CAAR;AAGAV,IAAIS,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAT,IAAIS,GAAJ,CAAQE,qBAAWC,IAAX,EAAR;AACAZ,IAAIS,GAAJ,CAAQE,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAd,IAAIe,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,MAAT,CAAd;AAAA,CAAjB;AACAlB,IAAIe,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIL,IAAJ,CAAS,EAAC,UAAU,sCAAX,EAAT,CAAd;AAAA,CAAb;AACAZ,IAAImB,IAAJ,CAAS,SAAT,EAAoBC,yBAAeC,MAAnC;AACArB,IAAImB,IAAJ,CAAS,SAAT,EAAoBC,yBAAeE,MAAnC;AACAtB,IAAIe,GAAJ,CAAQ,YAAR,EAAsBQ,sBAAYC,aAAlC,EAAiD,UAACR,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,WAAT,CAAd;AAAA,CAAjD;AACAlB,IAAIS,GAAJ,CAAQ,OAAR,EAAiBc,sBAAYC,aAA7B,EAA4CC,gBAA5C;;AAEAzB,IAAIS,GAAJ,CAAQ,UAACb,GAAD,EAAMoB,GAAN,EAAWC,GAAX,EAAgBS,IAAhB,EAAyB;AAC7B5B,YAAQ6B,GAAR,CAAY,QAAZ,EAAsB/B,IAAIgC,OAA1B;AACAX,QAAIY,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBhB,IAAIgC,OAAzB;AACH,CAHD;;AAKA;AACA,IAAME,OAAOrC,QAAQC,GAAR,CAAYqC,IAAZ,IAAoB,IAAjC;AACAC,eAAKC,YAAL,CAAkBjC,GAAlB,EAAuBkC,MAAvB,CAA8BJ,IAA9B,EAAoC,YAAI;AACpChC,YAAQ6B,GAAR,uCAAgDG,IAAhD;AACH,CAFD","file":"index.js","sourcesContent":["\nimport express from 'express';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport config from './config';\nimport Middlewares from './api/middlewares'\nimport Authentication from './api/authentication'\nimport UserRouter from './user/router'\n\nif(!process.env.JWT_SECRET) {\n    const err = new Error('No JWT_SECRET in env variable, check instructions: https://github.com/samodum/base-mern#prepare-your-secret');\n    console.error(err);\n}\n\nconst app = express();\n\nmongoose.connect(config.mongoose.uri, { useMongoClient: true })\n.catch(err=>console.error(err));\n\nmongoose.Promise = global.Promise;\n\n// App Setup\napp.use(cors({\n    origin: ['https://www.amazingandyyy.com', 'http://localhost:3000']\n}));\napp.use(morgan('dev'));\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({extended: false}));\napp.get('/ping', (req, res) => res.send('pong'))\napp.get('/', (req, res) => res.json({'source': 'https://github.com/samodum/base-mern'}))\napp.post('/signup', Authentication.signup)\napp.post('/signin', Authentication.signin)\napp.get('/auth-ping', Middlewares.loginRequired, (req, res) => res.send('connected'))\napp.use('/user', Middlewares.loginRequired, UserRouter)\n\napp.use((err, req, res, next) => {\n    console.log('Error:', err.message);\n    res.status(422).json(err.message);\n});\n\n// Server Setup\nconst port = process.env.PORT || 8000\nhttp.createServer(app).listen(port, ()=>{\n    console.log(`\\x1b[32m`, `Server listening on: ${port}`, `\\x1b[0m`)\n});\n"]}